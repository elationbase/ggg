---
import { GameList } from '@/components/game';
import { AppLayout, BaseLayout } from '@/layouts';
import { firestore } from '@/lib/firebase/server';
import { TEXT } from '@/lib/i18n';
import type { ContactTypeWithId } from '@/lib/types';
import type { GameTypeWithId } from '@/lib/types/game';
import { Show } from '@/ui/Show';
import { getUser } from '@/utils';

/* Get session cookie */
const sessionCookie = Astro.cookies.get('session')?.value;
if (!sessionCookie) {
  return Astro.redirect('/login');
}

/* Verify session cookie and get user */
const user = await getUser(sessionCookie);
if (!user) {
  return Astro.redirect('/login');
}

/* get contacts from firestore */
const queryContacts = await firestore
  .collection('contacts')
  .where('authorId', '==', user.uid)
  .limit(100)
  .get();

const contactsDoc = queryContacts.docs.map((doc) => {
  return { documentId: doc.id, ...doc.data() };
}) as ContactTypeWithId[];

/* get created games from firestore */
const queryCreatedGames = await firestore
  .collection('games')
  .where('authorId', '==', user.uid)
  .limit(100)
  .get();

// Query Firestore for games where the user is a player
const queryInvitedGames = await firestore
  .collection('games')
  .where('players', 'array-contains', user.email)
  .limit(100)
  .get();

// Map the query results to an array of game documents
const createdamesDoc = queryCreatedGames.docs.map((doc) => {
  return { documentId: doc.id, ...doc.data() };
}) as GameTypeWithId[];

// Filter the created games to only include games scheduled for today or later
const createdGames = createdamesDoc
  .filter((game) => {
    // Create a new Date object from the game date and set the time to 00:00:00
    const gameDate = new Date(game.date);
    gameDate.setUTCHours(0, 0, 0, 0);
    // Create a new Date object for today and set the time to 00:00:00
    const today = new Date();
    today.setUTCHours(0, 0, 0, 0);
    // Return true if the game date is today or later
    return gameDate >= today;
  })
  // Sort the games by date in ascending order
  .sort((a, b) => +new Date(a.date) - +new Date(b.date));

// Map the query results to an array of game documents
const invitedGamesDoc = queryInvitedGames.docs.map((doc) => {
  return { documentId: doc.id, ...doc.data() };
}) as GameTypeWithId[];

// Sort the invited games by date in ascending order
const invitedGames = invitedGamesDoc.sort((a, b) => +new Date(a.date) - +new Date(b.date));
---

<BaseLayout title="Dashboard">
  <AppLayout>
    <section class="w-full grid grid-cols-1 gap-6 pb-4">
      <h1 class="text-xl sm:text-3xl w-full font-semibold mb-6">
        {TEXT.dashboard.gamesCreated}
      </h1>
      <Show when={createdGames.length === 0}>
        <p class="text-zinc-500 dark:text-zinc-400">{TEXT.dashboard.noGamesCreated}</p>
      </Show>
      <GameList games={createdGames} contacts={contactsDoc} />
    </section>
    <Show when={invitedGames.length > 0}>
      <section class="w-full grid grid-cols-1 gap-6 pb-4">
        <h1
          class="text-xl sm:text-3xl dark:text-zinc-100 w-full text-zinc-900 font-semibold mt-10 mb-6"
        >
          {TEXT.dashboard.gamesInvited}
        </h1>
        <GameList games={invitedGames} />
      </section>
    </Show>
  </AppLayout>
</BaseLayout>
